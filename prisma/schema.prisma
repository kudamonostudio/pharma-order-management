// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN_SUPREMO
  TIENDA_ADMIN
  COLABORADOR
}

enum OrderStatus {
  PENDING
  COMPLETE
  CANCELLED
}

model Profile {
  id        String   @id @db.Uuid // mismo id que auth.users
  role      Role     @default(COLABORADOR) // ADMIN_SUPREMO | TIENDA_ADMIN | COLABORADOR
  createdAt DateTime @default(now())

  @@map("profiles")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String?
  phone      String?
  role       Role      @default(COLABORADOR) // ADMIN_SUPREMO | TIENDA_ADMIN | COLABORADOR
  store      Store?    @relation(fields: [storeId], references: [id])
  storeId    Int?
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  orders Order[]

  @@map("users")
}

model Store {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  locations Location[]
  users     User[]

  @@map("stores")
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  phone     String?
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users  User[]
  orders Order[]

  @@map("locations")
}

model Order {
  id         Int         @id @default(autoincrement())
  orderCode  String
  date       DateTime
  status     OrderStatus
  total      Decimal
  location   Location    @relation(fields: [locationId], references: [id])
  locationId Int
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  @@map("orders")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  products Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  brand       String?
  unit        String? // Ej: "5 L", "1 Kg", "1 L"
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("products")
}
